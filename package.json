{
  "name": "com.unity.memoryprofiler",
  "displayName": "Memory Profiler",
  "version": "1.1.5",
  "unity": "2022.3",
  "description": "The Memory Profiler offers a unified solution allowing you to profile both small projects on mobile devices and big AAA projects on high end machines. It provides actionable information about allocations in the engine to allow developers to manage and reduce memory usage.",
  "keywords": [
    "profiler",
    "memory",
    "memoryprofiler",
    "snapshot",
    "profiling",
    "tool"
  ],
  "dependencies": {
    "com.unity.editorcoroutines": "1.0.0",
    "com.unity.collections": "1.2.3",
    "com.unity.mathematics": "1.2.1",
    "com.unity.burst": "1.8.0",
    "com.unity.profiling.core": "1.0.0"
  },
  "relatedPackages": {
    "com.unity.memoryprofiler.tests": "1.1.5"
  },
  "_upm": {
    "changelog": "### Added\n- Managed fields referencing native allocations are now parsed as references. References show up in the References To tab for the managed objects holding the references, as well as in the Referenced By tab for native allocations under `Native > Unity Subsystems > UnsafeUtility` in the All Of Memory table. Note that this is not an exhaustive list of all references to these allocations, as stack variables could reference them as well but are not part of the snapshot. Thus, a native allocation without references is not necessarily leaked.\n- Native Allocations (e.g. those listed in `Native > Unity Subsystems > UnsafeUtility` in the All Of Memory table) are now named based on the field and object information of the first managed reference to them, making them easier to parse than address values and stand out from the list as having reference information.\n\n### Fixed\n- The Boehm GC treats any pointer sized field as potential managed pointer. So far the Memory Profiler only examined reference fields to find referenced objects (outside of those directly held by static fields or GCHandles). The Memory Profiler does not yet follow this logic as it would end up finding invalid Managed objects, but it now finds references from unsafe pointer fields to Managed Objects that are also held by a GC Handle.\n- The Managed Fields table now shows any pointer sized fields that might be holding managed objects as referencing these managed objects (Note: if they are not referenced otherwise, they won't sho up in the other tables).\n\n### Changed\n- The References To table now shows field information for references held by managed fields"
  },
  "upmCi": {
    "footprint": "cab3611e05f4d244c1a2865eed289f483f1442da"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.memoryprofiler@1.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.memoryprofiler.git",
    "type": "git",
    "revision": "9af0687e062d2366531297d429bd2ae6c03c581d"
  }
}
